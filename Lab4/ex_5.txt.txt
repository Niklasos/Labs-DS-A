Exercise 5:
Testing of Lilian Sonestedt and Kevin Kaunisvaaras implementation.

The code is using names that refer to what the variables represent. Therefore, the implementation is easy to 
understand. The implementation is also structured in a good way that makes it easy to re-use the code implemented 
in this exercise. 

The tests that they have created themselves requires me to know what the outcome of the test case should be. 
A better solution would be to create if-statements and print something like "Success" when the test get the expected
value and "Fail" when it doesn't. Although that would have been better they had two pictures in the main folder of the
project so I could see that the test ran successfully.

I got 16 warnings when I redbuild the solution. And there are no NULL checks in the functions so you get an exception if you, 
for some reason input NULL to the function.

Exercise 1 test:
To test the implementation in exercise 1 I created a graph with 10 vertices and added 10 edges to it. Then 
I tested the functions GetNumVertices and GetNumEdges and compared them with the expected number in an if-statement.
Then I tested the functions GetNeighbors, GetInNeighbors, and GetOutNeighbors to see if they returned the vertices
they should. I compared these with an if-statement. 
The last thing I tested in exercise 1 was if the HasEdge and AddEdge worked. First I tested if the function returned 
0 before I added the edge, then I added the graph. I used an if-statement to make it easier to understand.

Exercise 2 test:
To test this implementation I changed the values of the start and end in the function testExercise2() to see if I still 
got the correct answer. The test still ran successfully.

Exercise 3 test:
To test this implementation I created a new ComponentGraph. I ran SCC on it and compared the vertices SCCnumber with the 
vertices that should have the same SCC number. The test ran successfully on my graph.    

Exercise 4 test:
I created a new SSP_Graph and ran the bellman_Ford function with a source node. After this I created an array with the 
expected disFromSource. I looped through the SSP_Graph and compared the nodes in the SSP_Graphs disFromSource to the 
array. The test ran succesfully!

Niklas Olsson
950405
